Todo:
 * code clean up
 * parent/child mapping
 * caching of dynamic methods and expiring/purging old methods
 * property/field lookup, use attributes?
 * documentation
 * be able to save generated functions to assembly on disk
 
  
 * var db = lib.GetConnection("sqlConnection");
 * db.Open();
 * [ operations using db ]
 * db.Close();
  
 * var products = db.Query<product>("sqlstatement", "sqlparameters[]");
 * var product = db.SingleOrDefault<product>("sqlStatement", "sqlparameters[]");
 * var value = db.ExecuteScalar<int>("sqlStatement", "sqlparameters[]");
 * int count = db.ExecuteNonQuery(..);
   
 * support 
  *  Multimapping
 *      var orders = db.Query<order>(new Type[] {typeof(customer), typeof(billingaddress), typeof(deliveryaddress), typeof(product)}, mapping.callback, sql, args);
  
 * Query Parameters
 * int count = db.ExecuteNonQuery("update table set column=@0 where id=@1", "fred", 123);
 * int count = db.ExecuteNonQuery("update table set column=@text where id=@id", new { text="fred", id=123});
 
 * Paged Results
 * var PageOf<product> = db.Paged<product>(page, rowsPerPage, sqlstatement, parameters[]);
 *      class PageOf {
 *          int Page;
 *          int RowsPerPage;
 *          int TotalPages;
 *          int TotalRows;
 *          IEnumerable<product> Items;
 *      }


 // Query by using named or numbered parameters, can mix.
 var products = db.Query<product>("select * from products where staus=@status", new {status=100});
 var products = db.Query<product>("select * from products where staus=@0", 100);

 // handle arrays for in(...) conditions?
 var products = db.Query<product>("select * from products where id in @ids", new {ids=new int[] {1,2,3}});
 var products = db.Query<product>("select * from products where id in @0", new int[] {1,2,3});

 var product  = db.Query<product>("select * from products where id=@id", new {id=1}).SingleOrDefault();
 var product  = db.Query<product>("select * from products where id=@0", new {id=1}).SingleOrDefault();
