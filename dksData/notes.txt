

var orders = db.Query<order>(new Type[] {typeof(customer), typeof(billingaddress), typeof(deliveryaddress), typeof(product)}, mapping.callback, sql, args)



for each row from reader

    for each t in Type[]
        find reader overlay point
        obj of type t
        generate il to map t from row
    next

    push Types onto stack
    result  = mapping.callback
    if result != null
        yield return result
    else
        flush = true
next

if flush==true
    yield return mapping.callback(null,...)







class invoice
    date, orderno, ref, value, etc
    Address as class
        Street as string
        Street2 as string
        Suburb as string
        City as string
        PostCode as string
        Country as string
    end class

    Items as Collection of Item
        Item as string
        Quantity as integer
        Price as single
        Tax as single
    end collection
end class

var invoices = db.QueryMapped<invoice>(new Type[]{typeof(Address), typeof(Item)}, callBackFunction, "exec dbo.Invoices")
